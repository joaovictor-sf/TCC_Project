// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TCC_MVVM.Infra;

#nullable disable

namespace TCC_MVVM.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250528200456_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TCC_MVVM.Model.InactivityLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<TimeSpan>("MaxInactivity")
                        .HasColumnType("interval");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<TimeSpan>("TotalInactivity")
                        .HasColumnType("interval");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserModelId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("UserModelId");

                    b.ToTable("InactivityLogs");
                });

            modelBuilder.Entity("TCC_MVVM.Model.ProcessLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AppName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<TimeSpan>("UsageTime")
                        .HasColumnType("interval");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserModelId")
                        .HasColumnType("integer");

                    b.Property<string>("WindowTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("UserModelId");

                    b.ToTable("ProcessLogs");
                });

            modelBuilder.Entity("TCC_MVVM.Model.UserModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WorkHours")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@sistema.com",
                            IsActive = true,
                            LastName = "Master",
                            Name = "Admin",
                            PasswordHash = "$2a$11$.VCJ0QEhQDU/nxKqypncf.3Vi6a2Xil3.6Vq1ewVT9e4kqjn3bM1i",
                            Role = "ADMIN",
                            Username = "admin",
                            WorkHours = "OITO_HORAS"
                        });
                });

            modelBuilder.Entity("TCC_MVVM.Model.InactivityLog", b =>
                {
                    b.HasOne("TCC_MVVM.Model.UserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TCC_MVVM.Model.UserModel", null)
                        .WithMany("InactivityLogs")
                        .HasForeignKey("UserModelId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TCC_MVVM.Model.ProcessLog", b =>
                {
                    b.HasOne("TCC_MVVM.Model.UserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TCC_MVVM.Model.UserModel", null)
                        .WithMany("ProcessLogs")
                        .HasForeignKey("UserModelId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TCC_MVVM.Model.UserModel", b =>
                {
                    b.Navigation("InactivityLogs");

                    b.Navigation("ProcessLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
